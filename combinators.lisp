(defun ski-step (program)
  (cond
    ((eq (car program) :I) 
     (cdr program))
    ((eq (car program) :K)
     (cons (cadr program)
	   (cdddr program)))
    ((eq (car program) :S)
     (cons (cadr program)
	   (cons (cadddr program)
		 (cons (list (caddr program)
			     (cadddr program))
		       (cddddr program)))))))

(defun print-program (program)
  (princ program))

(defun ski-eval (program)
  (cond
    ((null program) t)
    ((listp (car program))
     (ski-eval (cons (ski-step (car program))
		     (cdr program))))
    (t (ski-eval (ski-step program)))))

(defun test-case (tcase)
  (let ((result (ski-eval (car tcase)))
	(expected (cadr tcase)))
    (unless (equal result expected)
      (fresh-line) (princ "========================================")
      (fresh-line) (princ "Execution of program: ") (print-program (car tcase))
      (fresh-line) (princ "gave:       ") (print-program result)
      (fresh-line) (princ "instead of: ") (print-program expected) (fresh-line))))

(defun test ()
  (let ((tests 
	 '(((I) (I))
	   ((I I) (I))
	   ((K) (K))
	   ((K K) (K K))
	   ((K K I) (K))
	   ((K I K) (I))
	   ((K I K I) (I)))))
    (map nil #'test-case tests)))